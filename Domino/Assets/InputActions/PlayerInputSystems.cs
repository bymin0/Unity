//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/PlayerInputSystems.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSystems: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSystems()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystems"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""357b070c-d97d-4325-8075-f97de790c77b"",
            ""actions"": [
                {
                    ""name"": ""PlaceDimino"",
                    ""type"": ""Button"",
                    ""id"": ""010e47aa-9154-4b16-8c2d-dd6deee1106f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartChain"",
                    ""type"": ""Button"",
                    ""id"": ""fe5e9fd5-7c19-4794-9352-01342d6e117a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f64c77a8-1e30-497f-86ec-2c10b516c446"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceDimino"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c39975f9-30dd-4a8b-a381-0a237f6f8908"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartChain"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_PlaceDimino = m_GamePlay.FindAction("PlaceDimino", throwIfNotFound: true);
        m_GamePlay_StartChain = m_GamePlay.FindAction("StartChain", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
    private readonly InputAction m_GamePlay_PlaceDimino;
    private readonly InputAction m_GamePlay_StartChain;
    public struct GamePlayActions
    {
        private @PlayerInputSystems m_Wrapper;
        public GamePlayActions(@PlayerInputSystems wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceDimino => m_Wrapper.m_GamePlay_PlaceDimino;
        public InputAction @StartChain => m_Wrapper.m_GamePlay_StartChain;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
            @PlaceDimino.started += instance.OnPlaceDimino;
            @PlaceDimino.performed += instance.OnPlaceDimino;
            @PlaceDimino.canceled += instance.OnPlaceDimino;
            @StartChain.started += instance.OnStartChain;
            @StartChain.performed += instance.OnStartChain;
            @StartChain.canceled += instance.OnStartChain;
        }

        private void UnregisterCallbacks(IGamePlayActions instance)
        {
            @PlaceDimino.started -= instance.OnPlaceDimino;
            @PlaceDimino.performed -= instance.OnPlaceDimino;
            @PlaceDimino.canceled -= instance.OnPlaceDimino;
            @StartChain.started -= instance.OnStartChain;
            @StartChain.performed -= instance.OnStartChain;
            @StartChain.canceled -= instance.OnStartChain;
        }

        public void RemoveCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);
    public interface IGamePlayActions
    {
        void OnPlaceDimino(InputAction.CallbackContext context);
        void OnStartChain(InputAction.CallbackContext context);
    }
}
